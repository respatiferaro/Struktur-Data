class LinkedList:
    def __init__(self):
        self.head = None

    # mengecek kembali ruang linkedlistnya
    def isEmpty(self):
        if self.head is None:
            return True
        else:
            return False

    # metode untuk nambah data diawal atau sebelah kiri dari data
    def addToStart(self, data):
        # create a temporary node
        tempNode = Node(data)
        tempNode.setLink(self.head)
        self.head = tempNode
        del tempNode

    # metode untuk nambah data diakhir atau sebelah kanan dari data
    def addToEnd(self, data):
        start = self.head
        tempNode = Node(data)
        while start.getNextNode():
            start = start.getNextNode()
        start.setLink(tempNode)
        del tempNode
        return True

    # methode tampilan(sama aja kaya sistem print)
    def display(self):
        start = self.head
        if start is None:
            print("Empty List!!!")
            return False

        while start:
            print(str(start.getData()), end=" ")
            start = start.link
            if start:
                print("-->", end=" ")
        print()

    # methode untuk mengahapus data
    def remove(self, item):
        start = self.head
        previous = None
        found = False

        # search element in list
        while not found:
            if start.getData() == item:
                found = True
            else:
                previous = start
                start = start.getNextNode()

        # if previous is None then the data is found at first position
        if previous is None:
            self.head = start.getNextNode()
        else:
            previous.setLink(start.getNextNode())
        return found



# node class
class Node:

    def __init__(self, data=None, link=None):
        self.data = data
        self.link = link


    def updateData(self, data):
        self.data = data


    def setLink(self, node):
        self.link = node


    def getData(self):
        return self.data


    def getNextNode(self):
        return self.link



# membuat linkedlist
myList = LinkedList()

# menambhkan beberapa data
myList.addToStart(5)
myList.addToStart(4)
myList.addToStart(3)
myList.addToStart(2)
myList.addToStart(1)
myList.addToStart(78)
myList.display()
print("")
myList.addToEnd(12)
myList.addToEnd(13)
myList.addToEnd(54)
myList.display()
print("")

# menghapus data dari linked list
myList.remove(3)
myList.display()
print("data 3 telah dihapus dari linked list")
print("")
myList.remove(12)
myList.display()
print("data 12 telah dihapus dari linked list")
